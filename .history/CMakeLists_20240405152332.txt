cmake_minimum_required( VERSION 2.8 )
project(TRAIN_DBOW3)

set( CMAKE_BUILD_TYPE "Release" )
set( CMAKE_CXX_FLAGS "-std=c++11 -O3" )

# 设置你自己电脑上安装的libtorch的路径
set(TORCH_ROOTDIR "/home/lhk/Thirdparty/libtorch_cpu")
set(TORCH_ROOTDIR_INCLUDE "/home/lhk/Thirdparty/libtorch_cpu/include")
set(TORCH_ROOTDIR_LIB "/home/lhk/Thirdparty/libtorch_cpu/lib")
set(CAFFE2_SO "/home/lhk/Thirdparty/libtorch_cpu/lib/libcaffe2.so")
# /home/lhk/Thirdparty/libtorch_cpu/lib

set( FBOW_INCLUDE_DIRS "lib/fbow/include/fbow" )
set( FBOW_LIBS "lib/fbow/lib/" )  #这里的源代码有误，按这个写


# 寻找库文件
# torch
# 设置你自己电脑上安装的libtorch的路径
find_package(Torch REQUIRED PATHS "/home/lhk/Thirdparty/libtorch_cpu")

# opencv 
find_package( OpenCV 3 REQUIRED )

# 打印消息
message(“find_package执行完成“)

# 生成静态库文件
add_library(DPLextractor
${PROJECT_SOURCE_DIR}/src/SPextractor.cc
${PROJECT_SOURCE_DIR}/src/SuperPoint.cc
)
include_directories(DPLextractor
${TORCH_ROOTDIR_INCLUDE}
)
link_directories(${TORCH_ROOTDIR_LIB})
target_link_libraries(DPLextractor Torch ${CAFFE2_SO})

# 规定.h的路径,包含安装的第三方库文件的.h文件
include_directories(
${PROJECT_SOURCE_DIR}/include
${OpenCV_INCLUDE_DIRS}
${FBOW_INCLUDE_DIRS}
${TORCH_ROOTDIR_INCLUDE}
)


link_directories(
# 我指定的.so文件的路径
${TORCH_ROOTDIR_LIB}
# 我指定的.so文件的路径
# ${FBOW_LIBS}
# find_package找到的路径
# 如果是find_package找到的路径的话就放在target_link_libraries。
${OpenCV_LIBS}
${FBOW_LIBS}
${TORCH_LIBRARIES}
)

add_executable( feature_training_fbow feature_training_fbow.cpp )
target_link_libraries( feature_training_fbow -lstdc++fs  DPLextractor)
